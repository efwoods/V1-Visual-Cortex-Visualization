# config.yaml
latent_dim: 128
batch_size: 32
learning_rate: 1e-4
epochs: 100
save_every: 10
checkpoint_dir: checkpoints/

waveform_dict_path: data/collected_stimulus_waveforms.pkl
image_paths_dict_path: data/image_paths_dict.pkl

---

# models/waveform_encoder.py
import torch.nn as nn


class WaveformEncoder(nn.Module):
    def __init__(self, latent_dim=128):
        super().__init__()
        self.encoder = nn.Sequential(
            nn.Flatten(), nn.Linear(16 * 48, 256), nn.ReLU(), nn.Linear(256, latent_dim)
        )

    def forward(self, x):
        return self.encoder(x)
---



---

# data/dataset.py
import os
from PIL import Image
import numpy as np
import torch
from torch.utils.data import Dataset


class ImageWaveformDataset(Dataset):
    def __init__(self, waveform_dict, image_paths_dict, transform=None):
        self.samples = []
        self.transform = transform

        for c in range(120):
            c_key = f"condition_{c:03d}"
            for e in range(16):
                e_key = f"electrode_{e:02d}"
                waveforms = waveform_dict[c][e]
                image_paths = image_paths_dict[c_key][e_key]
                for i in range(waveforms.shape[0]):
                    self.samples.append((waveforms[i], image_paths[i]))

    def __len__(self):
        return len(self.samples)

    def __getitem__(self, idx):
        waveform, image_path = self.samples[idx]
        image = Image.open(image_path).convert("RGB")
        if self.transform:
            image = self.transform(image)
        waveform = torch.tensor(waveform, dtype=torch.float32)  # shape (16, 48)
        return image, waveform

---

The ImageWaveformDataset does not have images. They are file paths and numpy waveforms. 

there are approx .5 million samples of numpy waveforms and image file paths. to load all the images will be memory inefficient. Please load the data in batches by loading the images and waveforms in batches using the file paths provided at each sample and use those to train the neural network. 

I need train.py. 